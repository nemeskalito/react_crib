export const Components = () => {
	const funcComp = `function Greeting() {
  return <h1>Привет, Pavel!</h1>;
}

<Greeting />;`

	const classComp = `import React, { Component } from 'react';

class Greeting extends Component {
  render() {
    return <h1>Привет, Pavel!</h1>;
  }
}

<Greeting />;`

	const parentComponent = `function ParentComponent() {
  return (
    <div>
      <ChildComponent message={"Привет от родителя!"} />
    </div>
  );
}

function ChildComponent({ message }) {
  return <p>{message}</p>;
}`

	const app = `function App() {
  return (
    <div>
      <Header />
      <MainContent />
      <Footer />
    </div>
  );
}

function Header() {
  return <h1>Это заголовок</h1>;
}

function MainContent() {
  return <p>Основной текст страницы</p>;
}

function Footer() {
  return <footer>Здесь футер</footer>;
}`
	const greeting = `const Greeting = ({name}) => {
  return <h1>Hello, {name}!</h1>;
};`
	const counter = `import React, { useState } from 'react';

const Counter = () => {
  const [count, setCount] = useState(0);

  const increment = () => {
    setCount(count => count + 1);
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
};`
	return (
		<>
			<h1>Components</h1>
			<div className='impoBlock'>
				<h3>1. Что такое компоненты?</h3>
				<p>
					Компоненты — это основа любого приложения на React. Это небольшие,
					переиспользуемые кусочки кода, которые управляют отображением и
					поведением пользовательского интерфейса.
					<br />
					Компоненты позволяют разбить интерфейс на независимые части, про
					которые легко думать в отдельности. Например, всем известный интерфейс
					можно разбить на такие компоненты:
				</p>
				<img src='../../src/assets/components.png' alt='#' />
				<p>
					Во многом компоненты ведут себя как обычные функции JavaScript. Они
					принимают произвольные входные данные (так называемые «пропсы») и
					возвращают React-элементы, описывающие, что мы хотим увидеть на
					экране. Компоненты как кирпичики из которых ты можешь строить свое
					приложение
				</p>
				<h2>Примеры компонентов в реальной жизни</h2>
				<ul>
					<li>
						- <strong>Лего-кирпичики:</strong> Каждый кирпичик — это компонент.
						Ты можешь комбинировать их, чтобы строить более сложные конструкции.
					</li>
					<li>
						<strong>- Автомобиль:</strong> Руль, двигатель и колёса — это
						отдельные компоненты, которые работают вместе.
					</li>
				</ul>
				<img src='../../src/assets/house.jpg' alt='' />
			</div>
			<div className='impoBlock'>
				<h3>2. Виды компонентов</h3>
				<p>В React есть два вида компонентов:</p>
				<h2>2.1. Функциональные компоненты</h2>
				<p>
					Функциональные компоненты — это простые функции, которые принимают
					props и возвращают JSX. Они являются наиболее современным и популярным
					способом написания компонентов.
				</p>
				<pre>
					<code>{funcComp}</code>
				</pre>
				<h2>2.2. Классовые компоненты</h2>
				<p>
					Классовые компоненты — это компоненты, которые создаются с
					использованием классов. Они использовались до появления хуков, но до
					сих пор встречаются в старых проектах.
				</p>
				<pre>
					<code>{classComp}</code>
				</pre>
			</div>
			<div className='impoBlock'>
				<h3>3. Основные характеристики компонентов</h3>
				<h2>3.1. Независимость</h2>
				<p>
					Каждый компонент работает независимо от других. Это значит, что
					изменения в одном компоненте не затронут другие.
				</p>
				<h2>3.2. Переиспользуемость</h2>
				<p>
					Компоненты можно использовать повторно в разных частях приложения, что
					снижает количество дублирующегося кода.
				</p>
				<h2>3.3. Иерархия</h2>
				<p>
					Компоненты могут быть вложенными: родительский компонент передаёт
					данные дочерним через props (разберем в следующей главе).
				</p>
				<pre>
					<code>{parentComponent}</code>
				</pre>
				<h2>3.4. Компонента должна себя вести как чистая функция.</h2>
				<span>
					<strong>Чистой</strong> называется функция, которая:
				</span>
				<ul>
					<li>
						- Для одинаковых входных данных всегда возвращает один результат.
					</li>
					<li>
						- Не имеет побочных эффектов (то есть не изменяет внешние
						состояния).
					</li>
					<li>- Не зависит от внешних состояний.</li>
				</ul>
			</div>
			<div className='impoBlock'>
				<h2>4. JSX и компоненты</h2>
				<span>
					<a href='https://habr.com/ru/articles/319270/'>JSX</a> (от JavaScript
					XML) делает код React читаемым и похожим на HTML.
				</span>
				<h2>Как JSX работает с компонентами?</h2>
				<ul>
					<li>- Каждый компонент возвращает JSX.</li>
					<li>
						- JSX может содержать другие компоненты, элементы HTML или
						JavaScript.
					</li>
				</ul>
				<pre>
					<code>{app}</code>
				</pre>
			</div>
			<div className='impoBlock'>
				<h3>5. Stateless VS Stateful</h3>
				<p>
					Когда речь идет о React, часто упоминаются термины "stateless" и
					"stateful". Чтобы понять, что они значат, давай разберемся c этим.
				</p>
				<h2>Stateless компоненты </h2>
				<p>
					Они просто принимают props и возвращают JSX, который описывает, как
					должен выглядеть UI. Эти компоненты не имеют внутреннего состояния и
					не могут изменять свое поведение в зависимости от событий или действий
					пользователя.
				</p>
				<pre>
					<code>{greeting}</code>
				</pre>
				<span>
					В этом примере компонент Greeting принимает проп name и отображает
					приветствие. Он не хранит состояние и не изменяется с течением
					времени.
				</span>
				<h2>Stateful компоненты</h2>
				<p>
					Stateful компоненты могут управлять состоянием и изменять свое
					поведение в зависимости от событий. Они используют внутреннее
					состояние, чтобы отслеживать изменения и обновлять UI в ответ на
					действия пользователя или другие события.
				</p>
				<p>
					С появлением хуков в React 16.8 функциональные компоненты могут также
					управлять состоянием и эффектами. Теперь можно создавать stateful
					функциональные компоненты с помощью хуков useState и useEffect.
				</p>
				<pre>
					<code>{counter}</code>
				</pre>
				<span>
					<i>
						Stateless компоненты просто рендерят UI, в то время как stateful
						компоненты имеют внутреннее состояние, которое позволяет им изменять
						своё поведение в ответ на события.
					</i>
				</span>
			</div>
			<div className='impoBlock'>
				<h3>6. Советы</h3>
				<ul>
					<li>- Держи компоненты маленькими и выполняющими одну задачу.</li>
					<li>- Названия компонентов всегда начинай с заглавной буквы.</li>
					<li>
						- Используй функциональные компоненты для всех новых проектов.
					</li>
				</ul>
			</div>
		</>
	)
}
